//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `AuthModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "include/AuthModule.h"
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#pragma warning(disable : 4458) // declaration of ... hides class member
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#if ICE_INT_VERSION / 100 != 307
#error Ice version mismatch!
#endif
#if ICE_INT_VERSION % 100 >= 50
#error Beta header file detected
#endif
#if ICE_INT_VERSION % 100 < 8
#error Ice patch level mismatch!
#endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

    const ::std::string iceC_AuthModule_AuthInterface_ids[2] =
        {
            "::AuthModule::AuthInterface",
            "::Ice::Object"};
    const ::std::string iceC_AuthModule_AuthInterface_ops[] =
        {
            "getUserName",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "tryLogin",
            "tryRegister"};
    const ::std::string iceC_AuthModule_AuthInterface_tryLogin_name = "tryLogin";
    const ::std::string iceC_AuthModule_AuthInterface_tryRegister_name = "tryRegister";
    const ::std::string iceC_AuthModule_AuthInterface_getUserName_name = "getUserName";

}

bool AuthModule::AuthInterface::ice_isA(::std::string s, const ::Ice::Current &) const
{
    return ::std::binary_search(iceC_AuthModule_AuthInterface_ids, iceC_AuthModule_AuthInterface_ids + 2, s);
}

::std::vector<::std::string>
AuthModule::AuthInterface::ice_ids(const ::Ice::Current &) const
{
    return ::std::vector<::std::string>(&iceC_AuthModule_AuthInterface_ids[0], &iceC_AuthModule_AuthInterface_ids[2]);
}

::std::string
AuthModule::AuthInterface::ice_id(const ::Ice::Current &) const
{
    return ice_staticId();
}

const ::std::string &
AuthModule::AuthInterface::ice_staticId()
{
    static const ::std::string typeId = "::AuthModule::AuthInterface";
    return typeId;
}

/// \cond INTERNAL
bool AuthModule::AuthInterface::_iceD_tryLogin(::IceInternal::Incoming &inS, const ::Ice::Current &current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StructLoginInfo iceP_structLoginInfo;
    istr->readAll(iceP_structLoginInfo);
    inS.endReadParams();
    StructLoginReturn ret = this->tryLogin(::std::move(iceP_structLoginInfo), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool AuthModule::AuthInterface::_iceD_tryRegister(::IceInternal::Incoming &inS, const ::Ice::Current &current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StructRegistrationInfo iceP_structRegistrationInfo;
    istr->readAll(iceP_structRegistrationInfo);
    inS.endReadParams();
    StructRegistrationReturn ret = this->tryRegister(::std::move(iceP_structRegistrationInfo), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool AuthModule::AuthInterface::_iceD_getUserName(::IceInternal::Incoming &inS, const ::Ice::Current &current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userToken;
    istr->readAll(iceP_userToken);
    inS.endReadParams();
    ::std::string ret = this->getUserName(::std::move(iceP_userToken), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool AuthModule::AuthInterface::_iceDispatch(::IceInternal::Incoming &in, const ::Ice::Current &current)
{
    ::std::pair<const ::std::string *, const ::std::string *> r = ::std::equal_range(iceC_AuthModule_AuthInterface_ops, iceC_AuthModule_AuthInterface_ops + 7, current.operation);
    if (r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch (r.first - iceC_AuthModule_AuthInterface_ops)
    {
    case 0:
    {
        return _iceD_getUserName(in, current);
    }
    case 1:
    {
        return _iceD_ice_id(in, current);
    }
    case 2:
    {
        return _iceD_ice_ids(in, current);
    }
    case 3:
    {
        return _iceD_ice_isA(in, current);
    }
    case 4:
    {
        return _iceD_ice_ping(in, current);
    }
    case 5:
    {
        return _iceD_tryLogin(in, current);
    }
    case 6:
    {
        return _iceD_tryRegister(in, current);
    }
    default:
    {
        assert(false);
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }
    }
}
/// \endcond

/// \cond INTERNAL
void AuthModule::AuthInterfacePrx::_iceI_tryLogin(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::AuthModule::StructLoginReturn>> &outAsync, const StructLoginInfo &iceP_structLoginInfo, const ::Ice::Context &context)
{
    _checkTwowayOnly(iceC_AuthModule_AuthInterface_tryLogin_name);
    outAsync->invoke(
        iceC_AuthModule_AuthInterface_tryLogin_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream *ostr)
        {
            ostr->writeAll(iceP_structLoginInfo);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void AuthModule::AuthInterfacePrx::_iceI_tryRegister(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::AuthModule::StructRegistrationReturn>> &outAsync, const StructRegistrationInfo &iceP_structRegistrationInfo, const ::Ice::Context &context)
{
    _checkTwowayOnly(iceC_AuthModule_AuthInterface_tryRegister_name);
    outAsync->invoke(
        iceC_AuthModule_AuthInterface_tryRegister_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream *ostr)
        {
            ostr->writeAll(iceP_structRegistrationInfo);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void AuthModule::AuthInterfacePrx::_iceI_getUserName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>> &outAsync, const ::std::string &iceP_userToken, const ::Ice::Context &context)
{
    _checkTwowayOnly(iceC_AuthModule_AuthInterface_getUserName_name);
    outAsync->invoke(
        iceC_AuthModule_AuthInterface_getUserName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream *ostr)
        {
            ostr->writeAll(iceP_userToken);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
AuthModule::AuthInterfacePrx::_newInstance() const
{
    return ::IceInternal::createProxy<AuthInterfacePrx>();
}
/// \endcond

const ::std::string &
AuthModule::AuthInterfacePrx::ice_staticId()
{
    return AuthInterface::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

    const ::std::string iceC_AuthModule_AuthInterface_tryLogin_name = "tryLogin";

    const ::std::string iceC_AuthModule_AuthInterface_tryRegister_name = "tryRegister";

    const ::std::string iceC_AuthModule_AuthInterface_getUserName_name = "getUserName";

}

/// \cond INTERNAL
::IceProxy::Ice::Object * ::IceProxy::AuthModule::upCast(AuthInterface *p) { return p; }

void ::IceProxy::AuthModule::_readProxy(::Ice::InputStream *istr, ::IceInternal::ProxyHandle<AuthInterface> &v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if (!proxy)
    {
        v = 0;
    }
    else
    {
        v = new AuthInterface;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::AuthModule::AuthInterface::_iceI_begin_tryLogin(const ::AuthModule::StructLoginInfo &iceP_structLoginInfo, const ::Ice::Context &context, const ::IceInternal::CallbackBasePtr &del, const ::Ice::LocalObjectPtr &cookie, bool sync)
{
    _checkTwowayOnly(iceC_AuthModule_AuthInterface_tryLogin_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_AuthModule_AuthInterface_tryLogin_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_AuthModule_AuthInterface_tryLogin_name, ::Ice::Normal, context);
        ::Ice::OutputStream *ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_structLoginInfo);
        result->endWriteParams();
        result->invoke(iceC_AuthModule_AuthInterface_tryLogin_name);
    }
    catch (const ::Ice::Exception &ex)
    {
        result->abort(ex);
    }
    return result;
}

::AuthModule::StructLoginReturn
IceProxy::AuthModule::AuthInterface::end_tryLogin(const ::Ice::AsyncResultPtr &result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_AuthModule_AuthInterface_tryLogin_name);
    ::AuthModule::StructLoginReturn ret;
    if (!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch (const ::Ice::UserException &ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream *istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::AuthModule::AuthInterface::_iceI_begin_tryRegister(const ::AuthModule::StructRegistrationInfo &iceP_structRegistrationInfo, const ::Ice::Context &context, const ::IceInternal::CallbackBasePtr &del, const ::Ice::LocalObjectPtr &cookie, bool sync)
{
    _checkTwowayOnly(iceC_AuthModule_AuthInterface_tryRegister_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_AuthModule_AuthInterface_tryRegister_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_AuthModule_AuthInterface_tryRegister_name, ::Ice::Normal, context);
        ::Ice::OutputStream *ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_structRegistrationInfo);
        result->endWriteParams();
        result->invoke(iceC_AuthModule_AuthInterface_tryRegister_name);
    }
    catch (const ::Ice::Exception &ex)
    {
        result->abort(ex);
    }
    return result;
}

::AuthModule::StructRegistrationReturn
IceProxy::AuthModule::AuthInterface::end_tryRegister(const ::Ice::AsyncResultPtr &result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_AuthModule_AuthInterface_tryRegister_name);
    ::AuthModule::StructRegistrationReturn ret;
    if (!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch (const ::Ice::UserException &ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream *istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::AuthModule::AuthInterface::_iceI_begin_getUserName(const ::std::string &iceP_userToken, const ::Ice::Context &context, const ::IceInternal::CallbackBasePtr &del, const ::Ice::LocalObjectPtr &cookie, bool sync)
{
    _checkTwowayOnly(iceC_AuthModule_AuthInterface_getUserName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_AuthModule_AuthInterface_getUserName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_AuthModule_AuthInterface_getUserName_name, ::Ice::Normal, context);
        ::Ice::OutputStream *ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userToken);
        result->endWriteParams();
        result->invoke(iceC_AuthModule_AuthInterface_getUserName_name);
    }
    catch (const ::Ice::Exception &ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::AuthModule::AuthInterface::end_getUserName(const ::Ice::AsyncResultPtr &result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_AuthModule_AuthInterface_getUserName_name);
    ::std::string ret;
    if (!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch (const ::Ice::UserException &ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream *istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object *
IceProxy::AuthModule::AuthInterface::_newInstance() const
{
    return new AuthInterface;
}
/// \endcond

const ::std::string &
IceProxy::AuthModule::AuthInterface::ice_staticId()
{
    return ::AuthModule::AuthInterface::ice_staticId();
}

AuthModule::AuthInterface::~AuthInterface()
{
}

/// \cond INTERNAL
::Ice::Object *AuthModule::upCast(AuthInterface *p) { return p; }

/// \endcond

namespace
{
    const ::std::string iceC_AuthModule_AuthInterface_ids[2] =
        {
            "::AuthModule::AuthInterface",
            "::Ice::Object"};

}

bool AuthModule::AuthInterface::ice_isA(const ::std::string &s, const ::Ice::Current &) const
{
    return ::std::binary_search(iceC_AuthModule_AuthInterface_ids, iceC_AuthModule_AuthInterface_ids + 2, s);
}

::std::vector<::std::string>
AuthModule::AuthInterface::ice_ids(const ::Ice::Current &) const
{
    return ::std::vector<::std::string>(&iceC_AuthModule_AuthInterface_ids[0], &iceC_AuthModule_AuthInterface_ids[2]);
}

const ::std::string &
AuthModule::AuthInterface::ice_id(const ::Ice::Current &) const
{
    return ice_staticId();
}

const ::std::string &
AuthModule::AuthInterface::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::AuthModule::AuthInterface";
    return typeId;
#else
    return iceC_AuthModule_AuthInterface_ids[0];
#endif
}

/// \cond INTERNAL
bool AuthModule::AuthInterface::_iceD_tryLogin(::IceInternal::Incoming &inS, const ::Ice::Current &current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream *istr = inS.startReadParams();
    StructLoginInfo iceP_structLoginInfo;
    istr->read(iceP_structLoginInfo);
    inS.endReadParams();
    StructLoginReturn ret = this->tryLogin(iceP_structLoginInfo, current);
    ::Ice::OutputStream *ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool AuthModule::AuthInterface::_iceD_tryRegister(::IceInternal::Incoming &inS, const ::Ice::Current &current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream *istr = inS.startReadParams();
    StructRegistrationInfo iceP_structRegistrationInfo;
    istr->read(iceP_structRegistrationInfo);
    inS.endReadParams();
    StructRegistrationReturn ret = this->tryRegister(iceP_structRegistrationInfo, current);
    ::Ice::OutputStream *ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool AuthModule::AuthInterface::_iceD_getUserName(::IceInternal::Incoming &inS, const ::Ice::Current &current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream *istr = inS.startReadParams();
    ::std::string iceP_userToken;
    istr->read(iceP_userToken);
    inS.endReadParams();
    ::std::string ret = this->getUserName(iceP_userToken, current);
    ::Ice::OutputStream *ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
    const ::std::string iceC_AuthModule_AuthInterface_all[] =
        {
            "getUserName",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "tryLogin",
            "tryRegister"};

}

/// \cond INTERNAL
bool AuthModule::AuthInterface::_iceDispatch(::IceInternal::Incoming &in, const ::Ice::Current &current)
{
    ::std::pair<const ::std::string *, const ::std::string *> r = ::std::equal_range(iceC_AuthModule_AuthInterface_all, iceC_AuthModule_AuthInterface_all + 7, current.operation);
    if (r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch (r.first - iceC_AuthModule_AuthInterface_all)
    {
    case 0:
    {
        return _iceD_getUserName(in, current);
    }
    case 1:
    {
        return _iceD_ice_id(in, current);
    }
    case 2:
    {
        return _iceD_ice_ids(in, current);
    }
    case 3:
    {
        return _iceD_ice_isA(in, current);
    }
    case 4:
    {
        return _iceD_ice_ping(in, current);
    }
    case 5:
    {
        return _iceD_tryLogin(in, current);
    }
    case 6:
    {
        return _iceD_tryRegister(in, current);
    }
    default:
    {
        assert(false);
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }
    }
}
/// \endcond

/// \cond STREAM
void AuthModule::AuthInterface::_iceWriteImpl(::Ice::OutputStream *ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<AuthInterface, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void AuthModule::AuthInterface::_iceReadImpl(::Ice::InputStream *istr)
{
    istr->startSlice();
    ::Ice::StreamReader<AuthInterface, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void AuthModule::_icePatchObjectPtr(AuthInterfacePtr &handle, const ::Ice::ObjectPtr &v)
{
    handle = AuthInterfacePtr::dynamicCast(v);
    if (v && !handle)
    {
        IceInternal::Ex::throwUOE(AuthInterface::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
