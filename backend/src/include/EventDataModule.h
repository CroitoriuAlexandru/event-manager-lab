//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `EventDataModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __EventDataModule_h__
#define __EventDataModule_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 8
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace EventDataModule
{

class EventsDataInterface;
class EventsDataInterfacePrx;

}

namespace EventDataModule
{

struct StructClient
{
    int eventId;
    ::std::string name;
    ::std::string phone;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(eventId, name, phone);
    }
};

struct StructService
{
    int eventId;
    ::std::string serviceTitle;
    ::std::string providerIdentity;
    ::std::string startHour;
    double duration;
    int cost;
    ::std::string description;
    ::std::string observations;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::std::string&, const ::std::string&, const ::std::string&, const double&, const int&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(eventId, serviceTitle, providerIdentity, startHour, duration, cost, description, observations);
    }
};

using SeqServices = ::std::vector<StructService>;

struct StructRegisterEvent
{
    ::std::string userToken;
    int userId;
    ::EventDataModule::StructClient client;
    ::std::string date;
    ::std::string startHour;
    double duration;
    ::std::string location;
    ::std::string observations;
    ::EventDataModule::SeqServices services;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const int&, const ::EventDataModule::StructClient&, const ::std::string&, const ::std::string&, const double&, const ::std::string&, const ::std::string&, const ::EventDataModule::SeqServices&> ice_tuple() const
    {
        return std::tie(userToken, userId, client, date, startHour, duration, location, observations, services);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace EventDataModule
{

class EventsDataInterface : public virtual ::Ice::Object
{
public:

    using ProxyType = EventsDataInterfacePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void registerEvent(StructRegisterEvent structRegisterEvent, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_registerEvent(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace EventDataModule
{

class EventsDataInterfacePrx : public virtual ::Ice::Proxy<EventsDataInterfacePrx, ::Ice::ObjectPrx>
{
public:

    void registerEvent(const StructRegisterEvent& structRegisterEvent, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &EventsDataInterfacePrx::_iceI_registerEvent, structRegisterEvent, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto registerEventAsync(const StructRegisterEvent& structRegisterEvent, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &EventsDataInterfacePrx::_iceI_registerEvent, structRegisterEvent, context);
    }

    ::std::function<void()>
    registerEventAsync(const StructRegisterEvent& structRegisterEvent,
                       ::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &EventDataModule::EventsDataInterfacePrx::_iceI_registerEvent, structRegisterEvent, context);
    }

    /// \cond INTERNAL
    void _iceI_registerEvent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const StructRegisterEvent&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    EventsDataInterfacePrx() = default;
    friend ::std::shared_ptr<EventsDataInterfacePrx> IceInternal::createProxy<EventsDataInterfacePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::EventDataModule::StructClient>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::EventDataModule::StructClient, S>
{
    static void read(S* istr, ::EventDataModule::StructClient& v)
    {
        istr->readAll(v.eventId, v.name, v.phone);
    }
};

template<>
struct StreamableTraits<::EventDataModule::StructService>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 21;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::EventDataModule::StructService, S>
{
    static void read(S* istr, ::EventDataModule::StructService& v)
    {
        istr->readAll(v.eventId, v.serviceTitle, v.providerIdentity, v.startHour, v.duration, v.cost, v.description, v.observations);
    }
};

template<>
struct StreamableTraits<::EventDataModule::StructRegisterEvent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::EventDataModule::StructRegisterEvent, S>
{
    static void read(S* istr, ::EventDataModule::StructRegisterEvent& v)
    {
        istr->readAll(v.userToken, v.userId, v.client, v.date, v.startHour, v.duration, v.location, v.observations, v.services);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace EventDataModule
{

using EventsDataInterfacePtr = ::std::shared_ptr<EventsDataInterface>;
using EventsDataInterfacePrxPtr = ::std::shared_ptr<EventsDataInterfacePrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace EventDataModule
{

class EventsDataInterface;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< EventsDataInterface>&);
::IceProxy::Ice::Object* upCast(EventsDataInterface*);
/// \endcond

}

}

namespace EventDataModule
{

class EventsDataInterface;
/// \cond INTERNAL
::Ice::Object* upCast(EventsDataInterface*);
/// \endcond
typedef ::IceInternal::Handle< EventsDataInterface> EventsDataInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::EventDataModule::EventsDataInterface> EventsDataInterfacePrx;
typedef EventsDataInterfacePrx EventsDataInterfacePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(EventsDataInterfacePtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace EventDataModule
{

struct StructClient
{
    ::Ice::Int eventId;
    ::std::string name;
    ::std::string phone;

    bool operator==(const StructClient& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(eventId != rhs_.eventId)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        if(phone != rhs_.phone)
        {
            return false;
        }
        return true;
    }

    bool operator<(const StructClient& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(eventId < rhs_.eventId)
        {
            return true;
        }
        else if(rhs_.eventId < eventId)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        if(phone < rhs_.phone)
        {
            return true;
        }
        else if(rhs_.phone < phone)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const StructClient& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const StructClient& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const StructClient& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const StructClient& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct StructService
{
    ::Ice::Int eventId;
    ::std::string serviceTitle;
    ::std::string providerIdentity;
    ::std::string startHour;
    ::Ice::Double duration;
    ::Ice::Int cost;
    ::std::string description;
    ::std::string observations;
};

typedef ::std::vector<StructService> SeqServices;

struct StructRegisterEvent
{
    ::std::string userToken;
    ::Ice::Int userId;
    ::EventDataModule::StructClient client;
    ::std::string date;
    ::std::string startHour;
    ::Ice::Double duration;
    ::std::string location;
    ::std::string observations;
    ::EventDataModule::SeqServices services;
};

}

namespace EventDataModule
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 * Create a wrapper instance by calling ::EventDataModule::newCallback_EventsDataInterface_registerEvent.
 */
class Callback_EventsDataInterface_registerEvent_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EventsDataInterface_registerEvent_Base> Callback_EventsDataInterface_registerEventPtr;

}

namespace IceProxy
{

namespace EventDataModule
{

class EventsDataInterface : public virtual ::Ice::Proxy<EventsDataInterface, ::IceProxy::Ice::Object>
{
public:

    void registerEvent(const ::EventDataModule::StructRegisterEvent& structRegisterEvent, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_registerEvent(_iceI_begin_registerEvent(structRegisterEvent, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_registerEvent(const ::EventDataModule::StructRegisterEvent& structRegisterEvent, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_registerEvent(structRegisterEvent, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerEvent(const ::EventDataModule::StructRegisterEvent& structRegisterEvent, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerEvent(structRegisterEvent, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerEvent(const ::EventDataModule::StructRegisterEvent& structRegisterEvent, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerEvent(structRegisterEvent, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerEvent(const ::EventDataModule::StructRegisterEvent& structRegisterEvent, const ::EventDataModule::Callback_EventsDataInterface_registerEventPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerEvent(structRegisterEvent, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerEvent(const ::EventDataModule::StructRegisterEvent& structRegisterEvent, const ::Ice::Context& context, const ::EventDataModule::Callback_EventsDataInterface_registerEventPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerEvent(structRegisterEvent, context, cb, cookie);
    }

    void end_registerEvent(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_registerEvent(const ::EventDataModule::StructRegisterEvent&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace EventDataModule
{

class EventsDataInterface : public virtual ::Ice::Object
{
public:

    typedef EventsDataInterfacePrx ProxyType;
    typedef EventsDataInterfacePtr PointerType;

    virtual ~EventsDataInterface();

#ifdef ICE_CPP11_COMPILER
    EventsDataInterface() = default;
    EventsDataInterface(const EventsDataInterface&) = default;
    EventsDataInterface& operator=(const EventsDataInterface&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void registerEvent(const StructRegisterEvent& structRegisterEvent, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_registerEvent(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const EventsDataInterface& lhs, const EventsDataInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const EventsDataInterface& lhs, const EventsDataInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::EventDataModule::StructClient>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::EventDataModule::StructClient, S>
{
    static void write(S* ostr, const ::EventDataModule::StructClient& v)
    {
        ostr->write(v.eventId);
        ostr->write(v.name);
        ostr->write(v.phone);
    }
};

template<typename S>
struct StreamReader< ::EventDataModule::StructClient, S>
{
    static void read(S* istr, ::EventDataModule::StructClient& v)
    {
        istr->read(v.eventId);
        istr->read(v.name);
        istr->read(v.phone);
    }
};

template<>
struct StreamableTraits< ::EventDataModule::StructService>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 21;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::EventDataModule::StructService, S>
{
    static void write(S* ostr, const ::EventDataModule::StructService& v)
    {
        ostr->write(v.eventId);
        ostr->write(v.serviceTitle);
        ostr->write(v.providerIdentity);
        ostr->write(v.startHour);
        ostr->write(v.duration);
        ostr->write(v.cost);
        ostr->write(v.description);
        ostr->write(v.observations);
    }
};

template<typename S>
struct StreamReader< ::EventDataModule::StructService, S>
{
    static void read(S* istr, ::EventDataModule::StructService& v)
    {
        istr->read(v.eventId);
        istr->read(v.serviceTitle);
        istr->read(v.providerIdentity);
        istr->read(v.startHour);
        istr->read(v.duration);
        istr->read(v.cost);
        istr->read(v.description);
        istr->read(v.observations);
    }
};

template<>
struct StreamableTraits< ::EventDataModule::StructRegisterEvent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::EventDataModule::StructRegisterEvent, S>
{
    static void write(S* ostr, const ::EventDataModule::StructRegisterEvent& v)
    {
        ostr->write(v.userToken);
        ostr->write(v.userId);
        ostr->write(v.client);
        ostr->write(v.date);
        ostr->write(v.startHour);
        ostr->write(v.duration);
        ostr->write(v.location);
        ostr->write(v.observations);
        ostr->write(v.services);
    }
};

template<typename S>
struct StreamReader< ::EventDataModule::StructRegisterEvent, S>
{
    static void read(S* istr, ::EventDataModule::StructRegisterEvent& v)
    {
        istr->read(v.userToken);
        istr->read(v.userId);
        istr->read(v.client);
        istr->read(v.date);
        istr->read(v.startHour);
        istr->read(v.duration);
        istr->read(v.location);
        istr->read(v.observations);
        istr->read(v.services);
    }
};

}
/// \endcond

namespace EventDataModule
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 * Create a wrapper instance by calling ::EventDataModule::newCallback_EventsDataInterface_registerEvent.
 */
template<class T>
class CallbackNC_EventsDataInterface_registerEvent : public Callback_EventsDataInterface_registerEvent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_EventsDataInterface_registerEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 */
template<class T> Callback_EventsDataInterface_registerEventPtr
newCallback_EventsDataInterface_registerEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventsDataInterface_registerEvent<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 */
template<class T> Callback_EventsDataInterface_registerEventPtr
newCallback_EventsDataInterface_registerEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventsDataInterface_registerEvent<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 */
template<class T> Callback_EventsDataInterface_registerEventPtr
newCallback_EventsDataInterface_registerEvent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventsDataInterface_registerEvent<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 */
template<class T> Callback_EventsDataInterface_registerEventPtr
newCallback_EventsDataInterface_registerEvent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventsDataInterface_registerEvent<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 * Create a wrapper instance by calling ::EventDataModule::newCallback_EventsDataInterface_registerEvent.
 */
template<class T, typename CT>
class Callback_EventsDataInterface_registerEvent : public Callback_EventsDataInterface_registerEvent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_EventsDataInterface_registerEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 */
template<class T, typename CT> Callback_EventsDataInterface_registerEventPtr
newCallback_EventsDataInterface_registerEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventsDataInterface_registerEvent<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 */
template<class T, typename CT> Callback_EventsDataInterface_registerEventPtr
newCallback_EventsDataInterface_registerEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventsDataInterface_registerEvent<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 */
template<class T, typename CT> Callback_EventsDataInterface_registerEventPtr
newCallback_EventsDataInterface_registerEvent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventsDataInterface_registerEvent<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::EventDataModule::EventsDataInterface::begin_registerEvent.
 */
template<class T, typename CT> Callback_EventsDataInterface_registerEventPtr
newCallback_EventsDataInterface_registerEvent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventsDataInterface_registerEvent<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
