//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `AuthModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __AuthModule_h__
#define __AuthModule_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 8
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace AuthModule
{

class AuthInterface;
class AuthInterfacePrx;

}

namespace AuthModule
{

enum class LoginResponse : unsigned char
{
    NotIdentified,
    Identified,
    LoggedIn,
    IncorectPassword,
    ThrottlingActivated
};

enum class RegistrationResponse : unsigned char
{
    UserRegistrationSuccessful,
    UserEmailAlreadyExists
};

struct StructLoginInfo
{
    ::std::string userEmail;
    ::std::string userPassword;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(userEmail, userPassword);
    }
};

struct StructRegistrationInfo
{
    ::std::string userName;
    ::AuthModule::StructLoginInfo structLoginInfo;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::AuthModule::StructLoginInfo&> ice_tuple() const
    {
        return std::tie(userName, structLoginInfo);
    }
};

struct StructLoginReturn
{
    ::std::string userName;
    ::std::string userToken;
    ::AuthModule::LoginResponse loginResponse;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::AuthModule::LoginResponse&> ice_tuple() const
    {
        return std::tie(userName, userToken, loginResponse);
    }
};

struct StructRegistrationReturn
{
    ::AuthModule::StructLoginReturn structLoginReturn;
    ::AuthModule::RegistrationResponse registrationResponse;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::AuthModule::StructLoginReturn&, const ::AuthModule::RegistrationResponse&> ice_tuple() const
    {
        return std::tie(structLoginReturn, registrationResponse);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace AuthModule
{

class AuthInterface : public virtual ::Ice::Object
{
public:

    using ProxyType = AuthInterfacePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual StructLoginReturn tryLogin(StructLoginInfo structLoginInfo, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_tryLogin(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual StructRegistrationReturn tryRegister(StructRegistrationInfo structRegistrationInfo, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_tryRegister(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getUserName(::std::string userToken, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getUserName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace AuthModule
{

class AuthInterfacePrx : public virtual ::Ice::Proxy<AuthInterfacePrx, ::Ice::ObjectPrx>
{
public:

    StructLoginReturn tryLogin(const StructLoginInfo& structLoginInfo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::AuthModule::StructLoginReturn>(true, this, &AuthInterfacePrx::_iceI_tryLogin, structLoginInfo, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto tryLoginAsync(const StructLoginInfo& structLoginInfo, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::AuthModule::StructLoginReturn>>().get_future())
    {
        return _makePromiseOutgoing<::AuthModule::StructLoginReturn, P>(false, this, &AuthInterfacePrx::_iceI_tryLogin, structLoginInfo, context);
    }

    ::std::function<void()>
    tryLoginAsync(const StructLoginInfo& structLoginInfo,
                  ::std::function<void(::AuthModule::StructLoginReturn)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::AuthModule::StructLoginReturn>(std::move(response), std::move(ex), std::move(sent), this, &AuthModule::AuthInterfacePrx::_iceI_tryLogin, structLoginInfo, context);
    }

    /// \cond INTERNAL
    void _iceI_tryLogin(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::AuthModule::StructLoginReturn>>&, const StructLoginInfo&, const ::Ice::Context&);
    /// \endcond

    StructRegistrationReturn tryRegister(const StructRegistrationInfo& structRegistrationInfo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::AuthModule::StructRegistrationReturn>(true, this, &AuthInterfacePrx::_iceI_tryRegister, structRegistrationInfo, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto tryRegisterAsync(const StructRegistrationInfo& structRegistrationInfo, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::AuthModule::StructRegistrationReturn>>().get_future())
    {
        return _makePromiseOutgoing<::AuthModule::StructRegistrationReturn, P>(false, this, &AuthInterfacePrx::_iceI_tryRegister, structRegistrationInfo, context);
    }

    ::std::function<void()>
    tryRegisterAsync(const StructRegistrationInfo& structRegistrationInfo,
                     ::std::function<void(::AuthModule::StructRegistrationReturn)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::AuthModule::StructRegistrationReturn>(std::move(response), std::move(ex), std::move(sent), this, &AuthModule::AuthInterfacePrx::_iceI_tryRegister, structRegistrationInfo, context);
    }

    /// \cond INTERNAL
    void _iceI_tryRegister(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::AuthModule::StructRegistrationReturn>>&, const StructRegistrationInfo&, const ::Ice::Context&);
    /// \endcond

    ::std::string getUserName(const ::std::string& userToken, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &AuthInterfacePrx::_iceI_getUserName, userToken, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getUserNameAsync(const ::std::string& userToken, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &AuthInterfacePrx::_iceI_getUserName, userToken, context);
    }

    ::std::function<void()>
    getUserNameAsync(const ::std::string& userToken,
                     ::std::function<void(::std::string)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &AuthModule::AuthInterfacePrx::_iceI_getUserName, userToken, context);
    }

    /// \cond INTERNAL
    void _iceI_getUserName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    AuthInterfacePrx() = default;
    friend ::std::shared_ptr<AuthInterfacePrx> IceInternal::createProxy<AuthInterfacePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::AuthModule::LoginResponse>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::AuthModule::RegistrationResponse>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::AuthModule::StructLoginInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::AuthModule::StructLoginInfo, S>
{
    static void read(S* istr, ::AuthModule::StructLoginInfo& v)
    {
        istr->readAll(v.userEmail, v.userPassword);
    }
};

template<>
struct StreamableTraits<::AuthModule::StructRegistrationInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::AuthModule::StructRegistrationInfo, S>
{
    static void read(S* istr, ::AuthModule::StructRegistrationInfo& v)
    {
        istr->readAll(v.userName, v.structLoginInfo);
    }
};

template<>
struct StreamableTraits<::AuthModule::StructLoginReturn>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::AuthModule::StructLoginReturn, S>
{
    static void read(S* istr, ::AuthModule::StructLoginReturn& v)
    {
        istr->readAll(v.userName, v.userToken, v.loginResponse);
    }
};

template<>
struct StreamableTraits<::AuthModule::StructRegistrationReturn>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::AuthModule::StructRegistrationReturn, S>
{
    static void read(S* istr, ::AuthModule::StructRegistrationReturn& v)
    {
        istr->readAll(v.structLoginReturn, v.registrationResponse);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace AuthModule
{

using AuthInterfacePtr = ::std::shared_ptr<AuthInterface>;
using AuthInterfacePrxPtr = ::std::shared_ptr<AuthInterfacePrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace AuthModule
{

class AuthInterface;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< AuthInterface>&);
::IceProxy::Ice::Object* upCast(AuthInterface*);
/// \endcond

}

}

namespace AuthModule
{

class AuthInterface;
/// \cond INTERNAL
::Ice::Object* upCast(AuthInterface*);
/// \endcond
typedef ::IceInternal::Handle< AuthInterface> AuthInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::AuthModule::AuthInterface> AuthInterfacePrx;
typedef AuthInterfacePrx AuthInterfacePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(AuthInterfacePtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace AuthModule
{

enum LoginResponse
{
    NotIdentified,
    Identified,
    LoggedIn,
    IncorectPassword,
    ThrottlingActivated
};

enum RegistrationResponse
{
    UserRegistrationSuccessful,
    UserEmailAlreadyExists
};

struct StructLoginInfo
{
    ::std::string userEmail;
    ::std::string userPassword;

    bool operator==(const StructLoginInfo& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(userEmail != rhs_.userEmail)
        {
            return false;
        }
        if(userPassword != rhs_.userPassword)
        {
            return false;
        }
        return true;
    }

    bool operator<(const StructLoginInfo& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(userEmail < rhs_.userEmail)
        {
            return true;
        }
        else if(rhs_.userEmail < userEmail)
        {
            return false;
        }
        if(userPassword < rhs_.userPassword)
        {
            return true;
        }
        else if(rhs_.userPassword < userPassword)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const StructLoginInfo& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const StructLoginInfo& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const StructLoginInfo& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const StructLoginInfo& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct StructRegistrationInfo
{
    ::std::string userName;
    ::AuthModule::StructLoginInfo structLoginInfo;

    bool operator==(const StructRegistrationInfo& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(userName != rhs_.userName)
        {
            return false;
        }
        if(structLoginInfo != rhs_.structLoginInfo)
        {
            return false;
        }
        return true;
    }

    bool operator<(const StructRegistrationInfo& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(userName < rhs_.userName)
        {
            return true;
        }
        else if(rhs_.userName < userName)
        {
            return false;
        }
        if(structLoginInfo < rhs_.structLoginInfo)
        {
            return true;
        }
        else if(rhs_.structLoginInfo < structLoginInfo)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const StructRegistrationInfo& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const StructRegistrationInfo& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const StructRegistrationInfo& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const StructRegistrationInfo& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct StructLoginReturn
{
    ::std::string userName;
    ::std::string userToken;
    ::AuthModule::LoginResponse loginResponse;

    bool operator==(const StructLoginReturn& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(userName != rhs_.userName)
        {
            return false;
        }
        if(userToken != rhs_.userToken)
        {
            return false;
        }
        if(loginResponse != rhs_.loginResponse)
        {
            return false;
        }
        return true;
    }

    bool operator<(const StructLoginReturn& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(userName < rhs_.userName)
        {
            return true;
        }
        else if(rhs_.userName < userName)
        {
            return false;
        }
        if(userToken < rhs_.userToken)
        {
            return true;
        }
        else if(rhs_.userToken < userToken)
        {
            return false;
        }
        if(loginResponse < rhs_.loginResponse)
        {
            return true;
        }
        else if(rhs_.loginResponse < loginResponse)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const StructLoginReturn& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const StructLoginReturn& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const StructLoginReturn& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const StructLoginReturn& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct StructRegistrationReturn
{
    ::AuthModule::StructLoginReturn structLoginReturn;
    ::AuthModule::RegistrationResponse registrationResponse;

    bool operator==(const StructRegistrationReturn& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(structLoginReturn != rhs_.structLoginReturn)
        {
            return false;
        }
        if(registrationResponse != rhs_.registrationResponse)
        {
            return false;
        }
        return true;
    }

    bool operator<(const StructRegistrationReturn& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(structLoginReturn < rhs_.structLoginReturn)
        {
            return true;
        }
        else if(rhs_.structLoginReturn < structLoginReturn)
        {
            return false;
        }
        if(registrationResponse < rhs_.registrationResponse)
        {
            return true;
        }
        else if(rhs_.registrationResponse < registrationResponse)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const StructRegistrationReturn& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const StructRegistrationReturn& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const StructRegistrationReturn& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const StructRegistrationReturn& rhs_) const
    {
        return !operator<(rhs_);
    }
};

}

namespace AuthModule
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::AuthModule::AuthInterface::begin_tryLogin.
 * Create a wrapper instance by calling ::AuthModule::newCallback_AuthInterface_tryLogin.
 */
class Callback_AuthInterface_tryLogin_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AuthInterface_tryLogin_Base> Callback_AuthInterface_tryLoginPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::AuthModule::AuthInterface::begin_tryRegister.
 * Create a wrapper instance by calling ::AuthModule::newCallback_AuthInterface_tryRegister.
 */
class Callback_AuthInterface_tryRegister_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AuthInterface_tryRegister_Base> Callback_AuthInterface_tryRegisterPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::AuthModule::AuthInterface::begin_getUserName.
 * Create a wrapper instance by calling ::AuthModule::newCallback_AuthInterface_getUserName.
 */
class Callback_AuthInterface_getUserName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AuthInterface_getUserName_Base> Callback_AuthInterface_getUserNamePtr;

}

namespace IceProxy
{

namespace AuthModule
{

class AuthInterface : public virtual ::Ice::Proxy<AuthInterface, ::IceProxy::Ice::Object>
{
public:

    ::AuthModule::StructLoginReturn tryLogin(const ::AuthModule::StructLoginInfo& structLoginInfo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_tryLogin(_iceI_begin_tryLogin(structLoginInfo, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_tryLogin(const ::AuthModule::StructLoginInfo& structLoginInfo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_tryLogin(structLoginInfo, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_tryLogin(const ::AuthModule::StructLoginInfo& structLoginInfo, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_tryLogin(structLoginInfo, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_tryLogin(const ::AuthModule::StructLoginInfo& structLoginInfo, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_tryLogin(structLoginInfo, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_tryLogin(const ::AuthModule::StructLoginInfo& structLoginInfo, const ::AuthModule::Callback_AuthInterface_tryLoginPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_tryLogin(structLoginInfo, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_tryLogin(const ::AuthModule::StructLoginInfo& structLoginInfo, const ::Ice::Context& context, const ::AuthModule::Callback_AuthInterface_tryLoginPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_tryLogin(structLoginInfo, context, cb, cookie);
    }

    ::AuthModule::StructLoginReturn end_tryLogin(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_tryLogin(const ::AuthModule::StructLoginInfo&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::AuthModule::StructRegistrationReturn tryRegister(const ::AuthModule::StructRegistrationInfo& structRegistrationInfo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_tryRegister(_iceI_begin_tryRegister(structRegistrationInfo, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_tryRegister(const ::AuthModule::StructRegistrationInfo& structRegistrationInfo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_tryRegister(structRegistrationInfo, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_tryRegister(const ::AuthModule::StructRegistrationInfo& structRegistrationInfo, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_tryRegister(structRegistrationInfo, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_tryRegister(const ::AuthModule::StructRegistrationInfo& structRegistrationInfo, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_tryRegister(structRegistrationInfo, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_tryRegister(const ::AuthModule::StructRegistrationInfo& structRegistrationInfo, const ::AuthModule::Callback_AuthInterface_tryRegisterPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_tryRegister(structRegistrationInfo, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_tryRegister(const ::AuthModule::StructRegistrationInfo& structRegistrationInfo, const ::Ice::Context& context, const ::AuthModule::Callback_AuthInterface_tryRegisterPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_tryRegister(structRegistrationInfo, context, cb, cookie);
    }

    ::AuthModule::StructRegistrationReturn end_tryRegister(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_tryRegister(const ::AuthModule::StructRegistrationInfo&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getUserName(const ::std::string& userToken, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getUserName(_iceI_begin_getUserName(userToken, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getUserName(const ::std::string& userToken, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getUserName(userToken, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUserName(const ::std::string& userToken, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserName(userToken, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserName(const ::std::string& userToken, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserName(userToken, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserName(const ::std::string& userToken, const ::AuthModule::Callback_AuthInterface_getUserNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserName(userToken, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserName(const ::std::string& userToken, const ::Ice::Context& context, const ::AuthModule::Callback_AuthInterface_getUserNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserName(userToken, context, cb, cookie);
    }

    ::std::string end_getUserName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getUserName(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace AuthModule
{

class AuthInterface : public virtual ::Ice::Object
{
public:

    typedef AuthInterfacePrx ProxyType;
    typedef AuthInterfacePtr PointerType;

    virtual ~AuthInterface();

#ifdef ICE_CPP11_COMPILER
    AuthInterface() = default;
    AuthInterface(const AuthInterface&) = default;
    AuthInterface& operator=(const AuthInterface&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual StructLoginReturn tryLogin(const StructLoginInfo& structLoginInfo, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_tryLogin(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual StructRegistrationReturn tryRegister(const StructRegistrationInfo& structRegistrationInfo, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_tryRegister(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getUserName(const ::std::string& userToken, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getUserName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const AuthInterface& lhs, const AuthInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const AuthInterface& lhs, const AuthInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::AuthModule::LoginResponse>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::AuthModule::RegistrationResponse>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::AuthModule::StructLoginInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::AuthModule::StructLoginInfo, S>
{
    static void write(S* ostr, const ::AuthModule::StructLoginInfo& v)
    {
        ostr->write(v.userEmail);
        ostr->write(v.userPassword);
    }
};

template<typename S>
struct StreamReader< ::AuthModule::StructLoginInfo, S>
{
    static void read(S* istr, ::AuthModule::StructLoginInfo& v)
    {
        istr->read(v.userEmail);
        istr->read(v.userPassword);
    }
};

template<>
struct StreamableTraits< ::AuthModule::StructRegistrationInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::AuthModule::StructRegistrationInfo, S>
{
    static void write(S* ostr, const ::AuthModule::StructRegistrationInfo& v)
    {
        ostr->write(v.userName);
        ostr->write(v.structLoginInfo);
    }
};

template<typename S>
struct StreamReader< ::AuthModule::StructRegistrationInfo, S>
{
    static void read(S* istr, ::AuthModule::StructRegistrationInfo& v)
    {
        istr->read(v.userName);
        istr->read(v.structLoginInfo);
    }
};

template<>
struct StreamableTraits< ::AuthModule::StructLoginReturn>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::AuthModule::StructLoginReturn, S>
{
    static void write(S* ostr, const ::AuthModule::StructLoginReturn& v)
    {
        ostr->write(v.userName);
        ostr->write(v.userToken);
        ostr->write(v.loginResponse);
    }
};

template<typename S>
struct StreamReader< ::AuthModule::StructLoginReturn, S>
{
    static void read(S* istr, ::AuthModule::StructLoginReturn& v)
    {
        istr->read(v.userName);
        istr->read(v.userToken);
        istr->read(v.loginResponse);
    }
};

template<>
struct StreamableTraits< ::AuthModule::StructRegistrationReturn>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::AuthModule::StructRegistrationReturn, S>
{
    static void write(S* ostr, const ::AuthModule::StructRegistrationReturn& v)
    {
        ostr->write(v.structLoginReturn);
        ostr->write(v.registrationResponse);
    }
};

template<typename S>
struct StreamReader< ::AuthModule::StructRegistrationReturn, S>
{
    static void read(S* istr, ::AuthModule::StructRegistrationReturn& v)
    {
        istr->read(v.structLoginReturn);
        istr->read(v.registrationResponse);
    }
};

}
/// \endcond

namespace AuthModule
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::AuthModule::AuthInterface::begin_tryLogin.
 * Create a wrapper instance by calling ::AuthModule::newCallback_AuthInterface_tryLogin.
 */
template<class T>
class CallbackNC_AuthInterface_tryLogin : public Callback_AuthInterface_tryLogin_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const StructLoginReturn&);

    CallbackNC_AuthInterface_tryLogin(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AuthInterfacePrx proxy = AuthInterfacePrx::uncheckedCast(result->getProxy());
        StructLoginReturn ret;
        try
        {
            ret = proxy->end_tryLogin(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_tryLogin.
 */
template<class T> Callback_AuthInterface_tryLoginPtr
newCallback_AuthInterface_tryLogin(const IceUtil::Handle<T>& instance, void (T::*cb)(const StructLoginReturn&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AuthInterface_tryLogin<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_tryLogin.
 */
template<class T> Callback_AuthInterface_tryLoginPtr
newCallback_AuthInterface_tryLogin(T* instance, void (T::*cb)(const StructLoginReturn&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AuthInterface_tryLogin<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::AuthModule::AuthInterface::begin_tryLogin.
 * Create a wrapper instance by calling ::AuthModule::newCallback_AuthInterface_tryLogin.
 */
template<class T, typename CT>
class Callback_AuthInterface_tryLogin : public Callback_AuthInterface_tryLogin_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const StructLoginReturn&, const CT&);

    Callback_AuthInterface_tryLogin(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AuthInterfacePrx proxy = AuthInterfacePrx::uncheckedCast(result->getProxy());
        StructLoginReturn ret;
        try
        {
            ret = proxy->end_tryLogin(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_tryLogin.
 */
template<class T, typename CT> Callback_AuthInterface_tryLoginPtr
newCallback_AuthInterface_tryLogin(const IceUtil::Handle<T>& instance, void (T::*cb)(const StructLoginReturn&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AuthInterface_tryLogin<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_tryLogin.
 */
template<class T, typename CT> Callback_AuthInterface_tryLoginPtr
newCallback_AuthInterface_tryLogin(T* instance, void (T::*cb)(const StructLoginReturn&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AuthInterface_tryLogin<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::AuthModule::AuthInterface::begin_tryRegister.
 * Create a wrapper instance by calling ::AuthModule::newCallback_AuthInterface_tryRegister.
 */
template<class T>
class CallbackNC_AuthInterface_tryRegister : public Callback_AuthInterface_tryRegister_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const StructRegistrationReturn&);

    CallbackNC_AuthInterface_tryRegister(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AuthInterfacePrx proxy = AuthInterfacePrx::uncheckedCast(result->getProxy());
        StructRegistrationReturn ret;
        try
        {
            ret = proxy->end_tryRegister(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_tryRegister.
 */
template<class T> Callback_AuthInterface_tryRegisterPtr
newCallback_AuthInterface_tryRegister(const IceUtil::Handle<T>& instance, void (T::*cb)(const StructRegistrationReturn&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AuthInterface_tryRegister<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_tryRegister.
 */
template<class T> Callback_AuthInterface_tryRegisterPtr
newCallback_AuthInterface_tryRegister(T* instance, void (T::*cb)(const StructRegistrationReturn&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AuthInterface_tryRegister<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::AuthModule::AuthInterface::begin_tryRegister.
 * Create a wrapper instance by calling ::AuthModule::newCallback_AuthInterface_tryRegister.
 */
template<class T, typename CT>
class Callback_AuthInterface_tryRegister : public Callback_AuthInterface_tryRegister_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const StructRegistrationReturn&, const CT&);

    Callback_AuthInterface_tryRegister(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AuthInterfacePrx proxy = AuthInterfacePrx::uncheckedCast(result->getProxy());
        StructRegistrationReturn ret;
        try
        {
            ret = proxy->end_tryRegister(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_tryRegister.
 */
template<class T, typename CT> Callback_AuthInterface_tryRegisterPtr
newCallback_AuthInterface_tryRegister(const IceUtil::Handle<T>& instance, void (T::*cb)(const StructRegistrationReturn&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AuthInterface_tryRegister<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_tryRegister.
 */
template<class T, typename CT> Callback_AuthInterface_tryRegisterPtr
newCallback_AuthInterface_tryRegister(T* instance, void (T::*cb)(const StructRegistrationReturn&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AuthInterface_tryRegister<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::AuthModule::AuthInterface::begin_getUserName.
 * Create a wrapper instance by calling ::AuthModule::newCallback_AuthInterface_getUserName.
 */
template<class T>
class CallbackNC_AuthInterface_getUserName : public Callback_AuthInterface_getUserName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AuthInterface_getUserName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AuthInterfacePrx proxy = AuthInterfacePrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getUserName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_getUserName.
 */
template<class T> Callback_AuthInterface_getUserNamePtr
newCallback_AuthInterface_getUserName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AuthInterface_getUserName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_getUserName.
 */
template<class T> Callback_AuthInterface_getUserNamePtr
newCallback_AuthInterface_getUserName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AuthInterface_getUserName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::AuthModule::AuthInterface::begin_getUserName.
 * Create a wrapper instance by calling ::AuthModule::newCallback_AuthInterface_getUserName.
 */
template<class T, typename CT>
class Callback_AuthInterface_getUserName : public Callback_AuthInterface_getUserName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AuthInterface_getUserName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AuthInterfacePrx proxy = AuthInterfacePrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getUserName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_getUserName.
 */
template<class T, typename CT> Callback_AuthInterface_getUserNamePtr
newCallback_AuthInterface_getUserName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AuthInterface_getUserName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::AuthModule::AuthInterface::begin_getUserName.
 */
template<class T, typename CT> Callback_AuthInterface_getUserNamePtr
newCallback_AuthInterface_getUserName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AuthInterface_getUserName<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
